#define NEXT(v, n) (((v) == (n))? 0 : (v))
#define SZ(x) ((int) x.size())
template <class T> bool get_max(T& a, const T &b) {return b > a? a = b, 1: 0;}
template <class T> bool get_min(T& a, const T &b) {return b < a? a = b, 1: 0;}
#define SQR(v) ((v) * (v))
const double eps = 1e-9;
const double pi = acos(-1.0);

int sgn(const double &a) {
    return (a > eps) - (a < -eps);
}

struct P {
    double x, y;
    P(const double &_x, const double &_y)
        :x(_x), y(_y) {}
    P() {}
    bool operator == (const P &a) const {
        return sgn(x - a.x) == 0 && sgn(y - a.y) == 0;
    }
    P operator + (const P &a) const {
        return P(x + a.x, y + a.y);
    }
    P operator - (const P &a) const {
        return P(x - a.x, y - a.y);
    }
    P operator * (const double &a) const {
        return P(x * a, y * a);
    }
    P operator / (const double &a) const {
        return P(x / a, y / a);
    }
    P trunc(double a) const {
        a /= sqrt(SQR(x) + SQR(y));
        return P(x * a, y * a);
    }
    P turn_left() const {
        return P(-y, x);
    }
    P turn_right() const {
        return P(y, -x);
    }
    const P& input() {
        scanf("%lf %lf", &x, &y);
        return *this;
    }
    const P& output() const {
        printf("P: %.12lf %.12lf\n", x, y);
        return *this;
    }
};

double dist2(const P &a, const P &b) {
    return SQR(a.x - b.x) + SQR(a.y - b.y);
}
double dist(const P &a, const P &b) {
    return sqrt(SQR(a.x - b.x) + SQR(a.y - b.y));
}
double cross(const P &a, const P &b, const P &c) {
    return (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x);
}
double dmul(const P &a, const P &b, const P &c) {
    return (b.x - a.x) * (c.x - a.x) + (b.y - a.y) * (c.y - a.y);
}

struct C {
    P mid;
    double r;
    C(const P &_mid, const double &_r)
        :mid(_mid), r(_r) {}
    C() {}
    bool operator == (const C &a) const {
        return mid == a.mid && sgn(r - a.r) == 0;
    }
    bool in(const C &a) const {
        return sgn(r + dist(mid, a.mid) - a.r) <= 0;
    }
    const C &input() {
        mid.input();
        scanf("%lf", &r);
        return *this;
    }
    const C &output() const {
        printf("P: %.12lf %.12lf R: %.12lf\n", mid.x, mid.y, r);
    }
};

double cal_angle(const C &c, const P &a, const P &b) {
    double k = dmul(c.mid, a, b) / SQR(c.r);
    get_min(k, 1.0);
    get_max(k, -1.0);
    return acos(k);
}
//拱形面积
double cal_area(const C &c, const P &a, const P &b) {
    return SQR(c.r) * cal_angle(c, a, b) / 2 - cross(c.mid, a, b) / 2;
}
//极角排序
struct cmp {
    P mid;
    cmp(const P &_mid)
        :mid(_mid) {}
    bool operator () (const P &a, const P &b) {
        return atan2(a.y - mid.y, a.x - mid.x) < atan2(b.y - mid.y, b.x - mid.x);
    }
};
//圆相交 返回两个交点
bool circles_intersection(const C &a, const C &b, P &c1, P &c2) {
    double dd = dist(a.mid, b.mid);
    if (sgn(dd - (a.r + b.r)) >= 0) {
        return false;
    }
    double l = (dd + (SQR(a.r) - SQR(b.r)) / dd) / 2;
    double h = sqrt(SQR(a.r) - SQR(l));
    c1 = a.mid + (b.mid - a.mid).trunc(l) + (b.mid - a.mid).turn_left().trunc(h);
    c2 = a.mid + (b.mid - a.mid).trunc(l) + (b.mid - a.mid).turn_right().trunc(h);
    return true;
}
//海伦公式        如果三角形三边长为a,b,c，令s=(a+b+c)/2，那么三角形面积就是:sqrt(s*(s-a)*(s-b)*(s-c))
//点到直线的距离 d(P,AB) = |(P - A) x (B - A)| / | B - A| 
//点到平面的距离 令n = (B - A) x (C - A)，那么d(P,ABC) = (P-A) ・ n / |n|
//要确定点A是否在三角形内，首先选择一个三角形内部的点B(重心就很不错)。接下来，判断点A,B是否都在三边所在的三条直线的同侧。 
//为了求出点C是否在线段AB上，先判断点C是否在直线AB上，再判断线段AB的长度是否等于线段AC长度与线段BC长度之和。 
/************************************************************************/
/* 常用的常量定义 */
#define INF  1e200
#define EP  1e-10
#define MAXV  300
#define PI  3.14159265
const int M=100000+5;
 
/* 基本几何结构 */
struct POINT {
    double x;
    double y; POINT(double a=0, double b=0) { x=a; y=b;} //constructor
};
struct LINESEG {
    POINT s;
    POINT e;
    LINESEG(POINT a, POINT b) { s=a; e=b;}
    LINESEG() { }
};
double max(double a,double b) {
    if (a>b) return a;
    return b;
}
double min(double a,double b) {
    if (a>b) return b;
    return a;
}
double sqr(double x){
    return x * x;
}
/********************\
* *
* 点的基本运算 *
* *
\********************/
double dist(POINT p1,POINT p2) {// 返回两点之间欧氏距离
    return( sqrt( (p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y) ) );
}
/******************************************************************************
r=multiply(sp,ep,op),得到(sp-op)*(ep-op)的叉积
r>0:ep在矢量opsp的逆时针方向；
r=0：opspep三点共线；
r<0:ep在矢量opsp的顺时针方向
*******************************************************************************/
double multiply(POINT sp,POINT ep,POINT op) {
    return((sp.x-op.x)*(ep.y-op.y)-(ep.x-op.x)*(sp.y-op.y));
}
/* 判断点p是否在线段l上，条件：(p在线段l所在的直线上)&& (点p在以线段l为对角线的矩形内) */
bool online(LINESEG l,POINT p) {
    return((multiply(l.e,p,l.s)==0) &&( ( (p.x-l.s.x)*(p.x-l.e.x)<=0 )&&( (p.y-l.s.y)*(p.y-l.e.y)<=0 ) ) );
}
//返回两点的中点
POINT midpoint(POINT a, POINT b)
{
    return POINT((a.x + b.x) / 2, (a.y + b.y) / 2);
}
// 如果线段u和v相交(包括相交在端点处)时，返回true
bool intersect(LINESEG u,LINESEG v) {
    return ( (max(u.s.x,u.e.x)>=min(v.s.x,v.e.x))&& //排斥实验
        (max(v.s.x,v.e.x)>=min(u.s.x,u.e.x))&&
        (max(u.s.y,u.e.y)>=min(v.s.y,v.e.y))&&
        (max(v.s.y,v.e.y)>=min(u.s.y,u.e.y))&&
        (multiply(v.s,u.e,u.s)*multiply(u.e,v.e,u.s)>=0)&& //跨立实验
        (multiply(u.s,v.e,v.s)*multiply(v.e,u.e,v.s)>=0));
}
// (线段u和v相交)&&(交点不是双方的端点) 时返回true
bool intersect_A(LINESEG u,LINESEG v) {
    return ((intersect(u,v))&&
        (!online(u,v.s))&&
        (!online(u,v.e))&&
        (!online(v,u.e))&&
        (!online(v,u.s)));
}