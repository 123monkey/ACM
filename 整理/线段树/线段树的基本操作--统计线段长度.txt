#include<stdio.h>
#include<string.h>
const int MAXN=1000;
struct Node
{
       int mid,left,right;
       int cover;
};
Node segt[MAXN*3];
void create(int l,int r,int num)
{
     int mid=(l+r)>>1;
     segt[num].left=l;
     segt[num].right=r;
     segt[num].mid=mid;
     segt[num].cover=0;
     if(l==r-1) return ;
     create(l,mid,2*num);
     create(mid,r,2*num+1);
}
void insert(int l,int r,int num)
{
     //printf("%d %d %d \n",l,r,num);
     //printf("left=%d right=%d \n",segt[num].left,segt[num].right); 
     if(segt[num].left==l&&segt[num].right==r)
     {
           segt[num].cover=1;
           return ;
     }
     if(segt[num].mid>=r)
         insert(l,r,2*num);
     else if(segt[num].mid<=l)
         insert(l,r,2*num+1);
     else
      {
       insert(l,segt[num].mid,2*num),
       insert(segt[num].mid,r,2*num+1);
       }
}
int del(int l,int r,int num)
{
     if(segt[num].left+1==segt[num].right)
     {
          int cover=segt[num].cover;
          segt[num].cover=0;
          return cover;
     }
     if(segt[num].cover)//问题的化归思想 
     {
          segt[num].cover=0;
          segt[num*2].cover=1;
          segt[num*2+1].cover=1;
     }
     if(segt[num].mid>=r)
          return del(l,r,2*num);
     if(segt[num].mid<=l)
          return del(l,r,2*num+1);
     return del(l,segt[num].mid,2*num)&&del(segt[num].mid,r,2*num+1);
}
int cal(int num)
{
    if(segt[num].cover) return segt[num].right-segt[num].left;
    if(segt[num].left+1==segt[num].right) return 0;
    return cal(2*num)+cal(2*num+1);
} 
int main()
{
    int n,m;
    while(scanf("%d%d",&n,&m),n||m)
    {
          memset(segt,0,sizeof(segt));          
          create(0,MAXN,1);
          int l,r;
          while(n--)
             scanf("%d%d",&l,&r),insert(l,r,1);
          while(m--)
             scanf("%d%d",&l,&r),del(l,r,1);
          printf("SUM of Segments'length:%d\n",cal(1));
    }
}
 
