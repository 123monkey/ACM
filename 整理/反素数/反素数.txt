/*
问题描述:

对于任何正整数x,起约数的个数记做g(x).例如g(1)=1,g(6)=4.

如果某个正整数x满足:对于任意i(0<i<x),都有g(i)<g(x),则称x为反素数.

现在给一个N,求出不超过N的最大的反素数.

比如:输入1000  输出 840

思维过程:

求[1..N]中最大的反素数-->求约数最多的数

如果求约数的个数 756=2^2*3^3*7^1

(2+1)*(3+1)*(1+1)=24

基于上述结论,给出算法:按照质因数大小递增顺序搜索每一个质因子,枚举每一个质因子

为了剪枝:

性质一:一个反素数的质因子必然是从2开始连续的质数.

因为最多只需要10个素数构造:2,3,5,7,11,13,17,19,23,29

性质二:p=2^t1*3^t2*5^t3*7^t4.....必然t1>=t2>=t3>=....
*/
int n;
int maxsum=0;
int bestnum=1;
int prime[={2,3,5,7,11,13,17,19,23,29};
//调用make(1,0,1,log(n)+1)
//当前枚举到的数；枚举到的第K大的质因子；该数的约数个数；质因子个数上限。
void make(long long num,long long k,long long sum,int limit){
  int i;
  long long temp;
  if (sum>maxsum){
    maxsum=sum;
    bestnum=num;  //如果约数个数更多，将最优解更新为当前数。
  }
  //如果约数个数相同，将最优解更新为较小的数。
  if (sum==maxsum && bestnum>num)bestnum=num;  

  if (k>10)return;

  temp=num;
  //开始枚举每个质因子的个数。
	for(i=1;i<=limit;i++){  
		if (temp*prime[k]>n)
			break;

		temp*=prime[k];  //累乘到当前数。
		make(temp,k+1,sum*(i+1),i); //继续下一步搜索。
	}
}
