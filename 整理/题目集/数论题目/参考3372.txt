
pku 3372 Candy Distribution2008-02-06 1845应该算是一个纯数学问题，就是有N个小孩按顺序编号顺时针坐成一个圈，然后老师给他们分糖果，开始是给No.1，No.2，No.4, No.7。。。。问最终能否让每个小朋友手中都至少有一个糖果。开始想这个问题很是麻烦，不知道该从何下手，但是归纳了几组数据后，就会发现，只有当小朋友的个数是2的k次幂的时候才能返回YES。关于这个的证明：

ak=1+(k-1)k
ai如果和aj同余于n
则ai-aj=(i-j)(i+j-1)2为n的倍数
然后可以
1。分析n为奇数a1到an中有同余的，并且a（i+n）=ai（mod n）
显然遍历不了0至n-1
2。然后n为偶数时，i-j和i+j-1奇偶不同
   n=t2^s
   t！=1 总能找到ij，i，j在0到n之间使ai=aj（mod n）
   而a（i+n）=ai+n2（mod n） a（i+2n）=ai（mod n）
   知道遍历不了……
再往下分析就是……这只是个大概
有了这个规律，这个题摇身一变就成了水题了，我们知道判断输入的那个数字是不是2的幂就可以了。

顺便说下关于2的幂的判断：

bool Is2Power(int nNum)
{
    return nNum  0  ((nNum & (~nNum + 1)) == nNum  true  false)  false;
}
原理分析：
一个数a是2的幂的话，用二进制表示它应该是只有一位为”1”。

举个具体的例子：
64　＝　00…001000000　（别忘记前面还有若干个0位）
~64　＝　11…110111111　（取反后，前面的0位变为1）
~64+1　＝11…111000000
（~64+1）& （64）　＝　00…001000000　＝　64

代码：

#include iostream
#include cmath
using namespace std;

bool Is2Power(int nNum)
{
    return nNum  0  ((nNum & (~nNum + 1)) == nNum  true  false)  false;
}


int main(void)
{
int n;
while(cinn)
{
   if(Is2Power(n))
    coutYESendl;
   else
    coutNOendl;
}
return 0;
}
 
